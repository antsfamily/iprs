#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2018-05-26 23:34:49
# @Author  : Zhi Liu (zhiliu.mind@gmail.com)
# @Link    : http://iridescent.ink
# @Version : $1.0$
import sys
import iprs
import numpy as np
import pickle as pkl
import matplotlib.pyplot as plt


sensor_name = 'DIY8'
acquis_name = 'DIY8'

sensor_name = 'DIY7'
acquis_name = 'DIY9'

sarplat = iprs.SarPlat()
sarplat.name = "sensor=" + sensor_name + "_acquisition=" + acquis_name
sarplat.sensor = iprs.SENSORS[sensor_name]
sarplat.acquisition = iprs.ACQUISITION[acquis_name]
sarplat.params = None
sarplat.printsp()

Na = sarplat.params['Na']
Nr = sarplat.params['Nr']

isregen = False
isregen = True

# imgfilepath = '../data/fig/radarsat/Tokyoradarsat004_128.tif'
# imgfilepath = '../data/fig/radarsat/Tokyoradarsat004_256.tif'

imgfilepath = '/home/liu/Desktop/Data/ws/dlimaging/dataset/MSTAR/samples/000001.png'
# imgfilepath = '/home/liu/Desktop/Data/ws/dataset/samples1024/000011.png'
imgfilepath = '../../data/img/Lotus32.png'
imgfilepath = '../../data/img/ship32.png'
# imgfilepath = '../../data/img/ship128.png'

grayimg = iprs.imread(imgfilepath)

grayimg = grayimg[:, :, 0]
print("grayimg.shape: ", grayimg.shape)
[H, W] = grayimg.shape
SNR = 30
imgns = iprs.imnoise(grayimg, SNR=SNR)
img = iprs.scale(grayimg, [0.0, 255.0], [0.0, 1.0])

bgv = 0
Sr0, targets = iprs.img2rawdata(
    sarplat, grayimg, bg=bgv, noise=None, TH=0, verbose=True)

gdshape = (H, W)

fileA = 'sensor' + sensor_name + "acquis" + acquis_name + '.pkl'

if isregen:
    A = iprs.sarmodel(sarplat, mod='2D1', gdshape=gdshape)
    invA = np.linalg.pinv(A)

    print("A.shape, invA.shape: ", A.shape, invA.shape)

    print("===saving mapping matrix...")
    iprs.save_sarmodel(A=A, invA=invA, datafile=fileA)

# ===load mapping matrix
print("===loading mapping matrix...")

A, invA = iprs.load_sarmodel(fileA, mod='AinvA')
print("A.shape, invA.shape: ", A.shape, invA.shape)


# ---------gen echo by s=Ag
Sr, img = iprs.sarmodel_genecho(A, img, mod='2D1', gdshape=gdshape)
print("Sr.shape", Sr.shape)
Sr = np.reshape(Sr, (Na, Nr))

# ===========================for imaging tesing
# ---------reconstruct image by g=inv(A)*s
print("reconstruct image by g=inv(A)*s")
# rimgpinv = np.matmul(invA, Sr.flatten())
rimgpinv = np.matmul(invA, Sr0.flatten())
print("rimgpinv.shape: ", rimgpinv.shape)

rimgpinv = np.reshape(rimgpinv, (H, W))
print("rimgpinv.shape:", rimgpinv.shape)

iprs.show_sarimage(rimgpinv, sarplat)


# ---------reconstruct image by g=A^H*s
print("reconstruct image by g=A^H*s")
AH = A.conj()
AH = AH.transpose()
rimgpAH = np.matmul(AH, Sr.flatten())
# rimgpAH = np.matmul(AH, Sr0.flatten())

rimgpAH = np.reshape(rimgpAH, (H, W))
print("rimgpAH.shape: ", rimgpAH.shape)

iprs.show_sarimage(rimgpAH, sarplat)


# ================= show result

print("===show simulated echo")
iprs.show_amplitude_phase(Sr0)

print("===imaging from echo signal simulated")
Sr_img0 = iprs.rda_adv(
    Sr0, sarplat, usezpa=True, usesrc=True, usermc=False, verbose=True)
# axismod = 'Image'
# axismod = 'SceneAbsolute'
axismod = 'SceneRelative'
title = 'Reconstructed Image using RD'

iprs.show_sarimage(
    Sr_img0, sarplat, axismod=axismod, title=title, aspect=None, outfile=None)

# ----------------reconstruct image by range doppler
print("Sr.shape", Sr.shape)

print("===show echo generated by: s=Ag")
iprs.show_amplitude_phase(Sr)

print("===imaging from echo signal generated by: s=Ag")
# Sr_img, ta, tr = iprs.rda(Sr, sarplat, verbose=False)
Sr_img = iprs.rda_adv(
    Sr, sarplat, usezpa=True, usesrc=False, usermc=False, verbose=True)

# axismod = 'Image'
# axismod = 'SceneAbsolute'
axismod = 'SceneRelative'
title = 'Reconstructed Image using RD'

iprs.show_sarimage(
    Sr_img, sarplat, axismod=axismod, title=title, aspect=None, outfile=None)


# ===========================display diff

print("error: ||Sr-Sr0||", np.linalg.norm(Sr - Sr0, ord=2))
print("error: ||Sr_img-Sr_img0||", np.linalg.norm(Sr_img - Sr_img0, ord=2))

# print(Sr, Sr0)
